#+title: SysApps utilities

Son pequeñas apps para una mejora en calidad de vida del uso del equipo

* Arch Wiki
Busca un programa o servicio en la wiki de arch

Importar modulos requeridos
#+begin_src bash header-args :tangle archwiki
#!/usr/bin/env python3
import webbrowser, requests, sys, bs4
#+end_src

Descarga la página con los resultados de la busqueda
#+begin_src bash header-args :tangle archwiki
url_to_open = 'https://wiki.archlinux.org/title/' + '+'.join(sys.argv[1:])
#+end_src

Abre en el navegador predeterminado la página solicitada
#+begin_src bash header-args :tangle archwiki
webbrowser.open(url_to_open)
#+end_src

* Askubuntu
Busca y abre los primeros tres resultados del foro askubuntu

Importar modulos requeridos
#+begin_src bash header-args :tangle askubuntu
#!/usr/bin/env python3
import webbrowser, requests, sys, bs4
#+end_src

Descarga la página con los resultados de la búsqueda
#+begin_src bash header-args :tangle askubuntu
# res = requests.get('https://askubuntu.com/search?q=' + '+'.join(sys.argv[1:]))
# res.raise_for_status()
#+end_src

Toma el HTML del resultado y filtra por la clase que tiene los link
#+begin_src bash header-args :tangle askubuntu
# soup = bs4.BeautifulSoup(res.text, 'html.parser')
# link_elems = soup.select('.question-hyperlink')
#+end_src

Abre cada link encontrado en una pestaña nueva
#+begin_src bash header-args :tangle askubuntu
# num_open = min(3, len(link_elems))
# for i in range(num_open):
    # url_to_open = 'https://askubuntu.com' + link_elems[i].get('href')
    # print('Abriendo', url_to_open)
    # webbrowser.open(url_to_open)
#+end_src

Código alternativo para abrir sólo la pagina con los resultados de la búsqueda
#+begin_src bash header-args :tangle askubuntu
if len(sys.argv) == 1:
    # Abrir pagina de busqueda de askubuntu si no se especifica nada
    address = 'https://askubuntu.com/search'
elif len(sys.argv) > 1:
    # Buscar en askubuntu lo escrito en la consola
    address = 'https://askubuntu.com/search?q=' + '+'.join(sys.argv[1:])

else:
    # Indicar que ha habido un error
    address = ''
    print('Se ha ingresado uno o más carácteres inválidos. Favor reintentar')
    sys.exit()


webbrowser.open(address)
#+end_src

* MapIt
Lanza un mapa en el navegador usando una dirección indicada junto al comando o la que esté en el portapapeles

Importar modulos necesarios
#+begin_src bash header-args :tangle mapit
#!/usr/bin/env python3
import webbrowser, sys, pyperclip
#+end_src

Decidir si leer la dirección desde la linea comandos o desde portapapeles si no se escribe nada junto a mapit
#+begin_src bash header-args :tangle mapit
if len(sys.argv) > 1:
    # Leer la dirección desde la linea de comandos
    direccion = ' '.join(sys.argv[1:])
else:
    # Leer la dirección desde el portapapeles
    direccion = pyperclip.paste()
#+end_src

Abrir el mapa con la dirección elegida
#+begin_src bash header-args :tangle mapit
webbrowser.open('https://www.google.com/maps/place/' + direccion)
#+end_src

* WebOpen
Permite abrir un enlace escrito en la consola directamente a el navegador

Importar modulos necesarios
#+begin_src bash header-args :tangle webopen
#!/usr/bin/env python3
import webbrowser, sys
#+end_src

Abrir google si no se especifica nada
#+begin_src bash header-args :tangle webopen
if len (sys.argv) == 1:
    address = 'https://google.com'
#+end_src

Si la dirección comienza con "http" se busca en el navegador
#+begin_src bash header-args :tangle webopen
elif str(sys.argv[1]).startswith('http'):
    address = ''.join(sys.argv[1:])
#+end_src

Si la dirección no comienza con "http" pero termina con .com .cl o .net se agrega "https://" y se busca en navegador
#+begin_src bash header-args :tangle webopen
elif not str(sys.argv[1]).startswith('http') and str(sys.argv[1]).endswith(('.com','.cl','.net')):
    address = 'https://' + ''.join(sys.argv[1:])
#+end_src

Buscar en google si hay más de una palabra
#+begin_src bash header-args :tangle webopen
else:
    address = 'https://google.com/search?q=' + '+'.join(sys.argv[1:])
#+end_src

Realizar la busqueda o abrir el link
#+begin_src bash header-args :tangle webopen
try:
    webbrowser.open(address)
except:
    print('Hubo un problema con la dirección ingresada.')
#+end_src

* Requirements
Instalar todos los modulos necesarios para que funcionen los script

Verificar en qué distribución se está ejecutando
#+begin_src bash header-args :tangle requirements.sh
#!/usr/bin/env bash
DIST=$(lsb_release -a | awk '/Distributor ID:/{print $3}')
#+end_src

Si es EndevourOS o Garuda
#+begin_src bash header-args :tangle requirements.sh
if [ $DIST = EndevourOS ] || [ $DIST = Garuda ]
then
    sudo pacman -S --noconfirm python-pip
    pip3 install requests bs4 pyperclip
#+end_src

Si es Ubuntu o Regolith
#+begin_src bash header-args :tangle requirements.sh
elif [ $DIST = Ubuntu ] || [ $DIST = Regolith ]
then
    sudo apt install -y python-pip
    pip3 install requests bs4 pyperclip
fi
#+end_src
